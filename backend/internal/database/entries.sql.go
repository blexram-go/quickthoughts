// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (id, created_at, updated_at, title, body)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, title, body
`

type CreateEntryParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Title     string
	Body      string
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Body,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Body,
	)
	return i, err
}

const getEntries = `-- name: GetEntries :many
SELECT id, created_at, updated_at, title, body FROM entries
`

func (q *Queries) GetEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryByID = `-- name: GetEntryByID :one
SELECT id, created_at, updated_at, title, body FROM entries
WHERE id = $1
`

func (q *Queries) GetEntryByID(ctx context.Context, id uuid.UUID) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryByID, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Body,
	)
	return i, err
}
